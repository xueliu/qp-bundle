/// @file cstdint
/// This is an emulation of a Standard C++ Library header for 16bit CPUs,
/// like MSP430.

#ifndef _GLIBCXX_CSTDINT
#define _GLIBCXX_CSTDINT 1

//lint -save
//lint -e9093 AUTOSAR:M17-0-2 the name ... is reserved to the compiler
//lint -e9145 AUTOSAR:M7-3-6 9145: using declaration in header

namespace std {

    using int8_t  = signed char;         //!< exact-width  8-bit signed   int
    using int16_t = signed int;          //!< exact-width 16-bit signed   int
    using int32_t = signed long int;     //!< exact-width 32-bit signed   int
    using int64_t = signed long long;    //!< exact-width 64-bit signed   int

    using uint8_t  = unsigned char;      //!< exact-width  8-bit unsigned int
    using uint16_t = unsigned int;       //!< exact-width 16-bit unsigned int
    using uint32_t = unsigned long int;  //!< exact-width 32-bit unsigned int
    using uint64_t = unsigned long long; //!< exact-width 64-bit unsigned int

    // Fastest minimum-width types. WG14/N843 C99 Standard, Section 7.18.1.3
    using int_fast8_t   = signed   int;  //!< fast at-least  8-bit signed   int
    using uint_fast8_t  = unsigned int;  //!< fast at-least  8-bit unsigned int
    using int_fast16_t  = signed   int;  //!< fast at-least 16-bit signed   int
    using uint_fast16_t = unsigned int;  //!< fast at-least 16-bit unsigned int
    using int_fast32_t  = signed   long; //!< fast at-least 32-bit signed   int
    using uint_fast32_t = unsigned long; //!< fast at-least 32-bit unsigned int
} // namespace std

//lint -restore

#endif // _GLIBCXX_CSTDINT
