//.$file${.::missile.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: game.qm
// File:  ${.::missile.cpp}
//
// This code has been generated by QM 4.6.0 <www.state-machine.com/qm/>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//
//.$endhead${.::missile.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "qpcpp.hpp"
#include "bsp.hpp"
#include "game.hpp"

//Q_DEFINE_THIS_FILE

//.$declare${AOs::Missile} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace GAME {

//.${AOs::Missile} ...........................................................
class Missile : public QP::QActive {
private:
    uint8_t m_x;
    uint8_t m_y;
    uint8_t m_exp_ctr;

public:
    Missile();

protected:
    Q_STATE_DECL(initial);
    Q_STATE_DECL(armed);
    Q_STATE_DECL(flying);
    Q_STATE_DECL(exploding);
};

} // namespace GAME
//.$enddecl${AOs::Missile} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

namespace GAME {

// local objects -------------------------------------------------------------
static Missile l_missile; // the sole instance of the Missile active object

} // namespace GAME

// Public-scope objects ------------------------------------------------------
//.$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//. Check for the minimum required QP version
#if (QP_VERSION < 650U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 6.5.0 or higher required
#endif
//.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//.$define${AOs::AO_Missile} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace GAME {


// opaque pointer
//.${AOs::AO_Missile} ........................................................
QP::QActive * const AO_Missile = &l_missile;

} // namespace GAME
//.$enddef${AOs::AO_Missile} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

// Active object definition --------------------------------------------------
//.$define${AOs::Missile} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace GAME {

//.${AOs::Missile} ...........................................................
//.${AOs::Missile::Missile} ..................................................
Missile::Missile()
  : QActive(&initial)
{}

//.${AOs::Missile::SM} .......................................................
Q_STATE_DEF(Missile, initial) {
    //.${AOs::Missile::SM::initial}
    subscribe( TIME_TICK_SIG);

    // local signals...
    QS_SIG_DICTIONARY(MISSILE_FIRE_SIG,   this);
    QS_SIG_DICTIONARY(HIT_WALL_SIG,       this);
    QS_SIG_DICTIONARY(DESTROYED_MINE_SIG, this);

    (void)e; // unused parameter

    QS_FUN_DICTIONARY(&armed);
    QS_FUN_DICTIONARY(&flying);
    QS_FUN_DICTIONARY(&exploding);

    return tran(&armed);
}
//.${AOs::Missile::SM::armed} ................................................
Q_STATE_DEF(Missile, armed) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::Missile::SM::armed::MISSILE_FIRE}
        case MISSILE_FIRE_SIG: {
            m_x = Q_EVT_CAST(ObjectPosEvt)->x;
            m_y = Q_EVT_CAST(ObjectPosEvt)->y;
            status_ = tran(&flying);
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}
//.${AOs::Missile::SM::flying} ...............................................
Q_STATE_DEF(Missile, flying) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::Missile::SM::flying::TIME_TICK}
        case TIME_TICK_SIG: {
            //.${AOs::Missile::SM::flying::TIME_TICK::[m_x+GAME_MISSILE_SPEED_X<GAME_T~}
            if (m_x + GAME_MISSILE_SPEED_X < GAME_TUNNEL_WIDTH) {
                m_x += GAME_MISSILE_SPEED_X;
                // tell the Tunnel to draw the Missile and test for wall hits
                ObjectImageEvt *oie = Q_NEW(ObjectImageEvt, MISSILE_IMG_SIG);
                oie->x   = m_x;
                oie->y   = m_y;
                oie->bmp = MISSILE_BMP;
                AO_Tunnel->POST(oie, this);
                status_ = Q_RET_HANDLED;
            }
            //.${AOs::Missile::SM::flying::TIME_TICK::[else]}
            else {
                status_ = tran(&armed);
            }
            break;
        }
        //.${AOs::Missile::SM::flying::HIT_WALL}
        case HIT_WALL_SIG: {
            status_ = tran(&exploding);
            break;
        }
        //.${AOs::Missile::SM::flying::DESTROYED_MINE}
        case DESTROYED_MINE_SIG: {
            AO_Ship->POST(e, this);
            status_ = tran(&armed);
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}
//.${AOs::Missile::SM::exploding} ............................................
Q_STATE_DEF(Missile, exploding) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::Missile::SM::exploding}
        case Q_ENTRY_SIG: {
            m_exp_ctr = 0U;
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${AOs::Missile::SM::exploding::TIME_TICK}
        case TIME_TICK_SIG: {
            //.${AOs::Missile::SM::exploding::TIME_TICK::[(m_x>=GAME_SPEED_X)&&(m_exp_ctr~}
            if ((m_x >= GAME_SPEED_X) && (m_exp_ctr < 15U)) {
                ++m_exp_ctr;           // advance the explosion counter
                m_x -= GAME_SPEED_X;   // move the explosion by one step

                // tell the Tunnel to render the current stage of Explosion
                ObjectImageEvt *oie = Q_NEW(ObjectImageEvt, EXPLOSION_SIG);
                oie->x   = m_x + 3U;   // x-pos of explosion
                oie->y   = (int8_t)((int)m_y - 4U); // y-pos
                oie->bmp = EXPLOSION0_BMP + (m_exp_ctr >> 2);
                AO_Tunnel->POST(oie, this);
                status_ = Q_RET_HANDLED;
            }
            //.${AOs::Missile::SM::exploding::TIME_TICK::[else]}
            else {
                status_ = tran(&armed);
            }
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}

} // namespace GAME
//.$enddef${AOs::Missile} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
