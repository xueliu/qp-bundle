//.$file${src::qmsmtst.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: qmsmtst.qm
// File:  ${src::qmsmtst.cpp}
//
// This code has been generated by QM 4.6.0 <www.state-machine.com/qm/>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This code is covered by the following QP license:
// License #   : QPCPP-EVAL
// Issued to   : Institution or an individual evaluating the QP/C++ framework
// Framework(s): qpcpp
// Support ends: 2020-12-31
// Product(s)  :
// This license is available only for evaluation purposes and
// the generated code is still licensed under the terms of GPL.
// Please submit request for extension of the evaluaion period at:
// <www.state-machine.com/licensing>/licensing/#RequestForm
//
//.$endhead${src::qmsmtst.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "qpcpp.hpp"
#include "qmsmtst.hpp"

namespace QMSMTST {

//.$declare${SMs::QMsmTst} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//.${SMs::QMsmTst} ...........................................................
class QMsmTst : public QP::QMsm {
private:
    bool m_foo;

public:
    QMsmTst()
      : QMsm(&initial)
    {}

protected:
    QM_STATE_DECL( initial);
    QM_STATE_DECL( s);
    QM_ACTION_DECL(s_e);
    QM_ACTION_DECL(s_x);
    QM_ACTION_DECL(s_i);
    QM_STATE_DECL( s1);
    QM_ACTION_DECL(s1_e);
    QM_ACTION_DECL(s1_x);
    QM_ACTION_DECL(s1_i);
    QM_STATE_DECL( s11);
    QM_ACTION_DECL(s11_e);
    QM_ACTION_DECL(s11_x);
    QM_STATE_DECL( s2);
    QM_ACTION_DECL(s2_e);
    QM_ACTION_DECL(s2_x);
    QM_ACTION_DECL(s2_i);
    QM_STATE_DECL( s21);
    QM_ACTION_DECL(s21_e);
    QM_ACTION_DECL(s21_x);
    QM_ACTION_DECL(s21_i);
    QM_STATE_DECL( s211);
    QM_ACTION_DECL(s211_e);
    QM_ACTION_DECL(s211_x);
};
//.$enddecl${SMs::QMsmTst} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

static QMsmTst l_msmtst; // the only instance of the QMsmTst class

// global-scope definitions -----------------------------------------
QP::QMsm * const the_msm = &l_msmtst; // the opaque pointer

//.$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//. Check for the minimum required QP version
#if (QP_VERSION < 650U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 6.5.0 or higher required
#endif
//.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//.$define${SMs::QMsmTst} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//.${SMs::QMsmTst} ...........................................................
//.${SMs::QMsmTst::SM} .......................................................
QM_STATE_DEF(QMsmTst, initial) {
    //.${SMs::QMsmTst::SM::initial}
    (void)e; // avoid compiler warning
    m_foo = 0U;
    BSP_display("top-INIT;");

    QS_SIG_DICTIONARY(A_SIG, this);
    QS_SIG_DICTIONARY(B_SIG, this);
    QS_SIG_DICTIONARY(C_SIG, this);
    QS_SIG_DICTIONARY(D_SIG, this);
    QS_SIG_DICTIONARY(E_SIG, this);
    QS_SIG_DICTIONARY(F_SIG, this);
    QS_SIG_DICTIONARY(G_SIG, this);
    QS_SIG_DICTIONARY(H_SIG, this);
    QS_SIG_DICTIONARY(I_SIG, this);
    QS_SIG_DICTIONARY(TERMINATE_SIG, this);
    QS_SIG_DICTIONARY(IGNORE_SIG, this);

    QS_FUN_DICTIONARY(&s);
    QS_FUN_DICTIONARY(&s1);
    QS_FUN_DICTIONARY(&s11);
    QS_FUN_DICTIONARY(&s2);
    QS_FUN_DICTIONARY(&s21);
    QS_FUN_DICTIONARY(&s211);

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[4];
    } const tatbl_ = { // tran-action table
        &s2_s, // target state
        {
            &s_e, // entry
            &s2_e, // entry
            &s2_i, // initial tran.
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}
//.${SMs::QMsmTst::SM::s} ....................................................
QP::QMState const QMsmTst::s_s = {
    QM_STATE_NULL, // superstate (top)
    &QMsmTst::s,
    &QMsmTst::s_e,
    &QMsmTst::s_x,
    &QMsmTst::s_i
};
//.${SMs::QMsmTst::SM::s}
QM_ACTION_DEF(QMsmTst, s_e) {
    BSP_display("s-ENTRY;");
    return qm_entry(&s_s);
}
//.${SMs::QMsmTst::SM::s}
QM_ACTION_DEF(QMsmTst, s_x) {
    BSP_display("s-EXIT;");
    return qm_exit(&s_s);
}
//.${SMs::QMsmTst::SM::s::initial}
QM_ACTION_DEF(QMsmTst, s_i) {
    //.${SMs::QMsmTst::SM::s::initial}
    BSP_display("s-INIT;");

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[3];
    } const tatbl_ = { // tran-action table
        &s11_s, // target state
        {
            &s1_e, // entry
            &s11_e, // entry
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}
//.${SMs::QMsmTst::SM::s}
QM_STATE_DEF(QMsmTst, s) {
    QP::QState status_;
    switch (e->sig) {
        //.${SMs::QMsmTst::SM::s::I}
        case I_SIG: {
            //.${SMs::QMsmTst::SM::s::I::[m_foo]}
            if (m_foo) {
                m_foo = 0U;
                BSP_display("s-I;");
                status_ = Q_RET_HANDLED;
            }
            else {
                status_ = Q_RET_UNHANDLED;
            }
            break;
        }
        //.${SMs::QMsmTst::SM::s::E}
        case E_SIG: {
            BSP_display("s-E;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[3];
            } const tatbl_ = { // tran-action table
                &s11_s, // target state
                {
                    &s1_e, // entry
                    &s11_e, // entry
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        //.${SMs::QMsmTst::SM::s::TERMINATE}
        case TERMINATE_SIG: {
            BSP_terminate(0);
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}
//.${SMs::QMsmTst::SM::s::s1} ................................................
QP::QMState const QMsmTst::s1_s = {
    &QMsmTst::s_s, // superstate
    &QMsmTst::s1,
    &QMsmTst::s1_e,
    &QMsmTst::s1_x,
    &QMsmTst::s1_i
};
//.${SMs::QMsmTst::SM::s::s1}
QM_ACTION_DEF(QMsmTst, s1_e) {
    BSP_display("s1-ENTRY;");
    return qm_entry(&s1_s);
}
//.${SMs::QMsmTst::SM::s::s1}
QM_ACTION_DEF(QMsmTst, s1_x) {
    BSP_display("s1-EXIT;");
    return qm_exit(&s1_s);
}
//.${SMs::QMsmTst::SM::s::s1::initial}
QM_ACTION_DEF(QMsmTst, s1_i) {
    //.${SMs::QMsmTst::SM::s::s1::initial}
    BSP_display("s1-INIT;");

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[2];
    } const tatbl_ = { // tran-action table
        &s11_s, // target state
        {
            &s11_e, // entry
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}
//.${SMs::QMsmTst::SM::s::s1}
QM_STATE_DEF(QMsmTst, s1) {
    QP::QState status_;
    switch (e->sig) {
        //.${SMs::QMsmTst::SM::s::s1::I}
        case I_SIG: {
            BSP_display("s1-I;");
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${SMs::QMsmTst::SM::s::s1::D}
        case D_SIG: {
            //.${SMs::QMsmTst::SM::s::s1::D::[!m_foo]}
            if (!m_foo) {
                m_foo = true;
                BSP_display("s1-D;");

                static struct {
                    QP::QMState const *target;
                    QP::QActionHandler act[3];
                } const tatbl_ = { // tran-action table
                    &s_s, // target state
                    {
                        &s1_x, // exit
                        &s_i, // initial tran.
                        Q_ACTION_NULL // zero terminator
                    }
                };
                status_ = qm_tran(&tatbl_);
            }
            else {
                status_ = Q_RET_UNHANDLED;
            }
            break;
        }
        //.${SMs::QMsmTst::SM::s::s1::A}
        case A_SIG: {
            BSP_display("s1-A;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[4];
            } const tatbl_ = { // tran-action table
                &s1_s, // target state
                {
                    &s1_x, // exit
                    &s1_e, // entry
                    &s1_i, // initial tran.
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        //.${SMs::QMsmTst::SM::s::s1::B}
        case B_SIG: {
            BSP_display("s1-B;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[2];
            } const tatbl_ = { // tran-action table
                &s11_s, // target state
                {
                    &s11_e, // entry
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        //.${SMs::QMsmTst::SM::s::s1::F}
        case F_SIG: {
            BSP_display("s1-F;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[5];
            } const tatbl_ = { // tran-action table
                &s211_s, // target state
                {
                    &s1_x, // exit
                    &s2_e, // entry
                    &s21_e, // entry
                    &s211_e, // entry
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        //.${SMs::QMsmTst::SM::s::s1::C}
        case C_SIG: {
            BSP_display("s1-C;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[4];
            } const tatbl_ = { // tran-action table
                &s2_s, // target state
                {
                    &s1_x, // exit
                    &s2_e, // entry
                    &s2_i, // initial tran.
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}
//.${SMs::QMsmTst::SM::s::s1::s11} ...........................................
QP::QMState const QMsmTst::s11_s = {
    &QMsmTst::s1_s, // superstate
    &QMsmTst::s11,
    &QMsmTst::s11_e,
    &QMsmTst::s11_x,
    Q_ACTION_NULL  // no initial tran.
};
//.${SMs::QMsmTst::SM::s::s1::s11}
QM_ACTION_DEF(QMsmTst, s11_e) {
    BSP_display("s11-ENTRY;");
    return qm_entry(&s11_s);
}
//.${SMs::QMsmTst::SM::s::s1::s11}
QM_ACTION_DEF(QMsmTst, s11_x) {
    BSP_display("s11-EXIT;");
    return qm_exit(&s11_s);
}
//.${SMs::QMsmTst::SM::s::s1::s11}
QM_STATE_DEF(QMsmTst, s11) {
    QP::QState status_;
    switch (e->sig) {
        //.${SMs::QMsmTst::SM::s::s1::s11::H}
        case H_SIG: {
            BSP_display("s11-H;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[4];
            } const tatbl_ = { // tran-action table
                &s_s, // target state
                {
                    &s11_x, // exit
                    &s1_x, // exit
                    &s_i, // initial tran.
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        //.${SMs::QMsmTst::SM::s::s1::s11::D}
        case D_SIG: {
            //.${SMs::QMsmTst::SM::s::s1::s11::D::[m_foo]}
            if (m_foo) {
                m_foo = false;
                BSP_display("s11-D;");

                static struct {
                    QP::QMState const *target;
                    QP::QActionHandler act[3];
                } const tatbl_ = { // tran-action table
                    &s1_s, // target state
                    {
                        &s11_x, // exit
                        &s1_i, // initial tran.
                        Q_ACTION_NULL // zero terminator
                    }
                };
                status_ = qm_tran(&tatbl_);
            }
            else {
                status_ = Q_RET_UNHANDLED;
            }
            break;
        }
        //.${SMs::QMsmTst::SM::s::s1::s11::G}
        case G_SIG: {
            BSP_display("s11-G;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[6];
            } const tatbl_ = { // tran-action table
                &s211_s, // target state
                {
                    &s11_x, // exit
                    &s1_x, // exit
                    &s2_e, // entry
                    &s21_e, // entry
                    &s211_e, // entry
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}
//.${SMs::QMsmTst::SM::s::s2} ................................................
QP::QMState const QMsmTst::s2_s = {
    &QMsmTst::s_s, // superstate
    &QMsmTst::s2,
    &QMsmTst::s2_e,
    &QMsmTst::s2_x,
    &QMsmTst::s2_i
};
//.${SMs::QMsmTst::SM::s::s2}
QM_ACTION_DEF(QMsmTst, s2_e) {
    BSP_display("s2-ENTRY;");
    return qm_entry(&s2_s);
}
//.${SMs::QMsmTst::SM::s::s2}
QM_ACTION_DEF(QMsmTst, s2_x) {
    BSP_display("s2-EXIT;");
    return qm_exit(&s2_s);
}
//.${SMs::QMsmTst::SM::s::s2::initial}
QM_ACTION_DEF(QMsmTst, s2_i) {
    //.${SMs::QMsmTst::SM::s::s2::initial}
    BSP_display("s2-INIT;");

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[3];
    } const tatbl_ = { // tran-action table
        &s211_s, // target state
        {
            &s21_e, // entry
            &s211_e, // entry
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}
//.${SMs::QMsmTst::SM::s::s2}
QM_STATE_DEF(QMsmTst, s2) {
    QP::QState status_;
    switch (e->sig) {
        //.${SMs::QMsmTst::SM::s::s2::I}
        case I_SIG: {
            //.${SMs::QMsmTst::SM::s::s2::I::[!m_foo]}
            if (!m_foo) {
                m_foo = true;
                BSP_display("s2-I;");
                status_ = Q_RET_HANDLED;
            }
            else {
                status_ = Q_RET_UNHANDLED;
            }
            break;
        }
        //.${SMs::QMsmTst::SM::s::s2::F}
        case F_SIG: {
            BSP_display("s2-F;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[4];
            } const tatbl_ = { // tran-action table
                &s11_s, // target state
                {
                    &s2_x, // exit
                    &s1_e, // entry
                    &s11_e, // entry
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        //.${SMs::QMsmTst::SM::s::s2::C}
        case C_SIG: {
            BSP_display("s2-C;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[4];
            } const tatbl_ = { // tran-action table
                &s1_s, // target state
                {
                    &s2_x, // exit
                    &s1_e, // entry
                    &s1_i, // initial tran.
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}
//.${SMs::QMsmTst::SM::s::s2::s21} ...........................................
QP::QMState const QMsmTst::s21_s = {
    &QMsmTst::s2_s, // superstate
    &QMsmTst::s21,
    &QMsmTst::s21_e,
    &QMsmTst::s21_x,
    &QMsmTst::s21_i
};
//.${SMs::QMsmTst::SM::s::s2::s21}
QM_ACTION_DEF(QMsmTst, s21_e) {
    BSP_display("s21-ENTRY;");
    return qm_entry(&s21_s);
}
//.${SMs::QMsmTst::SM::s::s2::s21}
QM_ACTION_DEF(QMsmTst, s21_x) {
    BSP_display("s21-EXIT;");
    return qm_exit(&s21_s);
}
//.${SMs::QMsmTst::SM::s::s2::s21::initial}
QM_ACTION_DEF(QMsmTst, s21_i) {
    //.${SMs::QMsmTst::SM::s::s2::s21::initial}
    BSP_display("s21-INIT;");

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[2];
    } const tatbl_ = { // tran-action table
        &s211_s, // target state
        {
            &s211_e, // entry
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}
//.${SMs::QMsmTst::SM::s::s2::s21}
QM_STATE_DEF(QMsmTst, s21) {
    QP::QState status_;
    switch (e->sig) {
        //.${SMs::QMsmTst::SM::s::s2::s21::G}
        case G_SIG: {
            BSP_display("s21-G;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[5];
            } const tatbl_ = { // tran-action table
                &s1_s, // target state
                {
                    &s21_x, // exit
                    &s2_x, // exit
                    &s1_e, // entry
                    &s1_i, // initial tran.
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        //.${SMs::QMsmTst::SM::s::s2::s21::A}
        case A_SIG: {
            BSP_display("s21-A;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[4];
            } const tatbl_ = { // tran-action table
                &s21_s, // target state
                {
                    &s21_x, // exit
                    &s21_e, // entry
                    &s21_i, // initial tran.
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        //.${SMs::QMsmTst::SM::s::s2::s21::B}
        case B_SIG: {
            BSP_display("s21-B;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[2];
            } const tatbl_ = { // tran-action table
                &s211_s, // target state
                {
                    &s211_e, // entry
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}
//.${SMs::QMsmTst::SM::s::s2::s21::s211} .....................................
QP::QMState const QMsmTst::s211_s = {
    &QMsmTst::s21_s, // superstate
    &QMsmTst::s211,
    &QMsmTst::s211_e,
    &QMsmTst::s211_x,
    Q_ACTION_NULL  // no initial tran.
};
//.${SMs::QMsmTst::SM::s::s2::s21::s211}
QM_ACTION_DEF(QMsmTst, s211_e) {
    BSP_display("s211-ENTRY;");
    return qm_entry(&s211_s);
}
//.${SMs::QMsmTst::SM::s::s2::s21::s211}
QM_ACTION_DEF(QMsmTst, s211_x) {
    BSP_display("s211-EXIT;");
    return qm_exit(&s211_s);
}
//.${SMs::QMsmTst::SM::s::s2::s21::s211}
QM_STATE_DEF(QMsmTst, s211) {
    QP::QState status_;
    switch (e->sig) {
        //.${SMs::QMsmTst::SM::s::s2::s21::s211::H}
        case H_SIG: {
            BSP_display("s211-H;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[5];
            } const tatbl_ = { // tran-action table
                &s_s, // target state
                {
                    &s211_x, // exit
                    &s21_x, // exit
                    &s2_x, // exit
                    &s_i, // initial tran.
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        //.${SMs::QMsmTst::SM::s::s2::s21::s211::D}
        case D_SIG: {
            BSP_display("s211-D;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[3];
            } const tatbl_ = { // tran-action table
                &s21_s, // target state
                {
                    &s211_x, // exit
                    &s21_i, // initial tran.
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}
//.$enddef${SMs::QMsmTst} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

} // namespace QMSMTST