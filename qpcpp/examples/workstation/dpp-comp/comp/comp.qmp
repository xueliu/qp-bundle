<?xml version="1.0" encoding="UTF-8"?>
<!--${Comp}-->
<package name="Comp" stereotype="0x02" namespace="DPP::">
 <!--${Comp::Philo}-->
 <class name="Philo" superclass="qpcpp::QHsm">
  <!--${Comp::Philo::m_timeEvt}-->
  <attribute name="m_timeEvt" type="CompTimeEvt" visibility="0x02" properties="0x00"/>
  <!--${Comp::Philo::class Table}-->
  <attribute name="class Table" type="friend" visibility="0x02" properties="0x00"/>
  <!--${Comp::Philo::Philo}-->
  <operation name="Philo" type="" visibility="0x00" properties="0x00">
   <code>  : QHsm(&amp;initial),
    m_timeEvt(AO_Table, this, TIMEOUT_SIG, 0U)</code>
  </operation>
  <!--${Comp::Philo::SM}-->
  <statechart properties="0x00">
   <!--${Comp::Philo::SM::initial}-->
   <initial target="../1">
    <action>static bool registered = false; // starts off with 0, per C-standard
(void)e; // suppress the compiler warning about unused parameter
if (!registered) {
    registered = true;
    QS_FUN_DICTIONARY(&amp;initial);
    QS_FUN_DICTIONARY(&amp;thinking);
    QS_FUN_DICTIONARY(&amp;hungry);
    QS_FUN_DICTIONARY(&amp;eating);
}
QS_SIG_DICTIONARY(HUNGRY_SIG, this);  // signal for each Philo</action>
    <initial_glyph conn="2,3,5,1,20,5,-4">
     <action box="0,-2,6,2"/>
    </initial_glyph>
   </initial>
   <!--${Comp::Philo::SM::thinking}-->
   <state name="thinking">
    <entry>m_timeEvt.armX(think_time(), 0U);</entry>
    <exit>(void)m_timeEvt.disarm();</exit>
    <!--${Comp::Philo::SM::thinking::TIMEOUT}-->
    <tran trig="TIMEOUT" target="../../2">
     <tran_glyph conn="2,14,3,1,20,12,-4">
      <action box="0,-2,10,2"/>
     </tran_glyph>
    </tran>
    <!--${Comp::Philo::SM::thinking::TEST}-->
    <tran trig="TEST">
     <tran_glyph conn="2,18,3,-1,12">
      <action box="0,-2,11,4"/>
     </tran_glyph>
    </tran>
    <state_glyph node="2,5,16,17">
     <entry box="1,2,5,2"/>
     <exit box="1,4,5,2"/>
    </state_glyph>
   </state>
   <!--${Comp::Philo::SM::hungry}-->
   <state name="hungry">
    <entry>TableEvt *pe = Q_NEW(TableEvt, HUNGRY_SIG);
pe-&gt;philo = this;
AO_Table-&gt;postLIFO(pe);</entry>
    <!--${Comp::Philo::SM::hungry::EAT}-->
    <tran trig="EAT" target="../../3">
     <tran_glyph conn="2,31,3,1,19,9,-3">
      <action box="0,-2,14,2"/>
     </tran_glyph>
    </tran>
    <state_glyph node="2,24,16,12">
     <entry box="1,2,5,2"/>
    </state_glyph>
   </state>
   <!--${Comp::Philo::SM::eating}-->
   <state name="eating">
    <entry>m_timeEvt.armX(eat_time(), 0U);</entry>
    <exit>(void)m_timeEvt.disarm();

// asynchronously post event to the Container
TableEvt *pe = Q_NEW(TableEvt, DONE_SIG);
pe-&gt;philo = this;
AO_Table-&gt;postLIFO(pe);</exit>
    <!--${Comp::Philo::SM::eating::TIMEOUT}-->
    <tran trig="TIMEOUT" target="../../1">
     <tran_glyph conn="2,48,3,1,22,-38,-6">
      <action box="0,-2,12,2"/>
     </tran_glyph>
    </tran>
    <state_glyph node="2,38,16,14">
     <entry box="1,2,5,2"/>
     <exit box="1,4,5,2"/>
    </state_glyph>
   </state>
   <state_diagram size="28,54"/>
  </statechart>
 </class>
 <!--${Comp::.}-->
 <directory name=".">
  <!--${Comp::.::philo.cpp}-->
  <file name="philo.cpp">
   <text>#include &quot;qpcpp.hpp&quot;
#include &quot;dpp.hpp&quot;
#include &quot;bsp.hpp&quot;

Q_DEFINE_THIS_FILE

namespace DPP {

// helper function to provide a randomized think time for Philos
inline QP::QTimeEvtCtr think_time() {
    return static_cast&lt;QP::QTimeEvtCtr&gt;((BSP::random() % BSP::TICKS_PER_SEC)
                                        + (BSP::TICKS_PER_SEC/2U));
}

// helper function to provide a randomized eat time for Philos
inline QP::QTimeEvtCtr eat_time() {
    return static_cast&lt;QP::QTimeEvtCtr&gt;((BSP::random() % BSP::TICKS_PER_SEC)
                                        + BSP::TICKS_PER_SEC);
}

} // namespace DPP

// Philo definition ----------------------------------------------------------
$define(Comp::Philo)</text>
  </file>
 </directory>
</package>
